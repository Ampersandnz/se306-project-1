import os

pathBase = os.path.dirname(__file__)
debugPaddingSize = 30
debugLogTitle = " DEBUG LOG "

class ActorListBuilder:
    def __init__(self, pathBase):
        self.actors = []
        self.pathBase = pathBase
        self.debugDir = "debuglogs"
        self.actorTypes = set(os.listdir(os.path.join(self.pathBase, "src/se306_p1_pkg/world/actors")))
        self.topicsShow = set()
        self.topicsLog = set()

    def setLogDirectory(self, logDir):
        self.debugDir = logDir

    def addActor(self, actorTokens):
        self.actors.append(actorTokens)

    def addTopicLog(self, topic):
        self.topicsLog.add(topic)

    def addTopicShow(self, topic):
        self.topicsShow.add(topic)

    def getStageEnd(self):
        outStrList = []
        outStrList.append("# This file is automatically generated by %s\n" % (__file__))
        default = "default"
        usedActors = set()
        for actor in self.actors:
            if actor[0] in self.actorTypes:
                usedActors.add(actor[0])
            else:
                usedActors.add(default)

        for usedActor in sorted(usedActors):
            outStrList.append("include \"actors/%s\"\n" % (usedActor))
        
        for actor in self.actors:
            if actor[0] in usedActors:
                outStrList.append("%s( name \"%s\" pose [ %s %s 0 %s ] color \"%s\")\n" % (actor[0], actor[0], actor[1], actor[2], actor[3], actor[4]))
            else:
                outStrList.append("%s( name \"%s\" pose [ %s %s 0 %s ] color \"%s\")\n" % (default, actor[0], actor[1], actor[2], actor[3], actor[4]))
        
        return "".join(outStrList)

    def getBashEnd(self):
        outStrList = []
        outStrList.append("#!/bin/bash\n")
        outStrList.append("# This file is automatically generated by %s\n" % (__file__))
        outStrList.append("export ROS_PACKAGE_PATH=`pwd`:$ROS_PACKAGE_PATH\n\n")
        outStrList.append("source devel/setup.bash\n")
        outStrList.append("roscore &\nROSCORE_PID=$!\n")

        # Upstage
        outStrList.append("rosrun upstage_pkg Upstage &\nUPSTAGE_PID=$!\n")

        for i in range(len(self.actors)):
            actor = self.actors[i]
            outStrList.append("rosrun se306_p1_pkg ActorSpawner %d %s %s %s %s &\nROBOT%d_PID=$!\n" % (i, actor[0], actor[1], actor[2], actor[3], i))

        outStrList.append("\nrosrun stage_ros stageros src/se306_p1_pkg/world/myworld.world\n\n")
        
        # Upstage
        outStrList.append("kill $UPSTAGE_PID\n")

        for i in range(len(self.actors)):
            outStrList.append("kill $ROBOT%d_PID\n" % (i))
        outStrList.append("kill $ROSCORE_PID")

        return "".join(outStrList)

    def getBashDebugEnd(self):
        scriptDebugFile = "%s/debugscript.txt" % (self.debugDir)
        
        outStrList = []
        outStrList.append("#!/bin/bash\n")
        outStrList.append("# This file is automatically generated by %s\n" % (__file__))
        outStrList.append("rm -rf %s\n" % (self.debugDir))
        outStrList.append("mkdir %s\n" % (self.debugDir))
        outStrList.append("export ROS_PACKAGE_PATH=`pwd`:$ROS_PACKAGE_PATH\n\n")
        outStrList.append("source devel/setup.bash\n")
        outStrList.append("roscore >> %s/roscore.txt &\nROSCORE_PID=$!\n" % (self.debugDir))
        outStrList.append("echo ROSCORE_PID = $ROSCORE_PID >> %s\n\n" % (scriptDebugFile))

        actorCounter = {}
        for i in range(len(self.actors)):
            actor = self.actors[i]
            if actor[0] in actorCounter:
                actorCounter[actor[0]] += 1
            else:
                actorCounter[actor[0]] = 0

            debugFile = "%s/actor_%s_%03d.txt" % (self.debugDir, actor[0], actorCounter[actor[0]])

            outStrList.append("echo \"%s%s%s\" > %s\n" % ("#" * debugPaddingSize, debugLogTitle, "#" * debugPaddingSize, debugFile))
            outStrList.append("echo ActorClass     = %s >> %s\n" % (actor[0], debugFile))
            outStrList.append("echo InitialX       = %s >> %s\n" % (actor[1], debugFile))
            outStrList.append("echo InitialY       = %s >> %s\n" % (actor[2], debugFile))
            outStrList.append("echo InitialAngle   = %s >> %s\n" % (actor[3], debugFile))
            outStrList.append("echo Colour         = %s >> %s\n" % (actor[4], debugFile))
            outStrList.append("echo \"%s\" >> %s\n" % ("#" * (debugPaddingSize * 2 + len(debugLogTitle)), debugFile))
            
            outStrList.append("rosrun se306_p1_pkg ActorSpawner %d %s %s %s %s & # >> %s &\nROBOT%d_PID=$!\n" % (
                i,
                actor[0],
                actor[1],
                actor[2],
                actor[3],
                debugFile,
                i))
            outStrList.append("echo ROBOT%d_PID = $ROBOT%d_PID >> %s\n\n" % (i, i, scriptDebugFile))

        messages = self.topicsLog | self.topicsShow
        i = 0
        for message in messages:
            debugFile = "%s/topic_%s.txt" % (self.debugDir, message)

            if message in self.topicsLog:
                outStrList.append("echo \"%s%s%s\" > %s\n" % ("#" * debugPaddingSize, debugLogTitle, "#" * debugPaddingSize, debugFile))
                outStrList.append("echo Topic          = %s >> %s\n" % (message, debugFile))
                outStrList.append("echo \"%s\" >> %s\n" % ("#" * (debugPaddingSize * 2 + len(debugLogTitle)), debugFile))

            # It's using bash-style while loops, so we can't safely use $SHELL
            if message in self.topicsShow:
                outStrList.append("$TERM -hold -title \"%s\" -e /bin/bash -c \"" % (message))
            else:
                outStrList.append("/bin/bash -c \"")

            outStrList.append(". devel/setup.bash;")
            outStrList.append(" ./persist.sh \\\"rostopic echo %s\\\"" % (message))
            if message in self.topicsShow:
                if message in self.topicsLog:
                    outStrList.append("| tee -a %s" % (debugFile))
            else:
                outStrList.append("| tee -a %s >> /dev/null" % (debugFile))
            
            outStrList.append("\" &\nMESSAGE%d_PID=$!\n" % (i))
            outStrList.append("echo MESSAGE%d_PID = $MESSAGE%d_PID >> %s\n\n" % (i, i, scriptDebugFile))

            i += 1
        
        # Upstage
        if True: # I want to indent this for organisational purposes.
            debugFile = "%s/upstage.txt" % (self.debugDir)
            
            outStrList.append("echo \"%s%s%s\" > %s\n" % ("#" * debugPaddingSize, debugLogTitle, "#" * debugPaddingSize, debugFile))
            outStrList.append("echo \"%s\" >> %s\n" % ("#" * (debugPaddingSize * 2 + len(debugLogTitle)), debugFile))
            
            outStrList.append("rosrun upstage_pkg Upstage & # >> %s &\nUPSTAGE_PID=$!\n" % (debugFile))
            outStrList.append("echo UPSTAGE_PID = $UPSTAGE_PID >> %s\n\n" % (scriptDebugFile))
        
        outStrList.append("\nrosrun stage_ros stageros src/se306_p1_pkg/world/myworld.world >> %s/stage.txt\n\n" % (self.debugDir))
        
        # Upstage
        if True:
            outStrList.append("kill $UPSTAGE_PID\n")

        for i in range(len(self.actors)):
            outStrList.append("kill $ROBOT%d_PID\n" % (i))
            
        for i in range(len(messages)):
            outStrList.append("kill $MESSAGE%d_PID\n" % (i))
        
        outStrList.append("kill $ROSCORE_PID")

        return "".join(outStrList)

if __name__ == "__main__":
    actorLB = ActorListBuilder(pathBase)
    
    for line in open(os.path.join(pathBase, "src/se306_p1_pkg/world/actorlist"), "r"):
        tokens = line.split("#")[0].split()
        if len(tokens) != 5: continue
        
        actorLB.addActor(tokens)

    for lineRaw in open(os.path.join(pathBase, "debugconfig"), "r"):
        line = lineRaw.split("#")[0]

        argStart = line.find("(")
        argEnd = line.find(")")
        if argStart == -1 or argEnd == -1 or argEnd < argStart: continue

        funName = line[:argStart].lower()
        args = line[argStart+1:argEnd].split(",")
        args = [arg.strip() for arg in args]

        if funName == "logdirectory":
            if len(args) != 1: continue
            actorLB.setLogDirectory(args[0])

        elif funName == "logtopics":
            if len(args) < 1: continue
            for arg in args:
                actorLB.addTopicLog(arg)

        elif funName == "showtopics":
            if len(args) < 1: continue
            for arg in args:
                actorLB.addTopicShow(arg)

        elif funName == "topics":
            if len(args) < 1: continue
            for arg in args:
                actorLB.addTopicLog(arg)
                actorLB.addTopicShow(arg)

    fOutStage = open(os.path.join(pathBase, "src/se306_p1_pkg/world/__autogen__donteditme__actorlist__"), "w")
    fOutStage.write(actorLB.getStageEnd())
    fOutStage.close()

    fOutBash = open(os.path.join(pathBase, "run.sh"), "w")
    fOutBash.write(actorLB.getBashEnd())
    fOutBash.close()

    fOutDebugBash = open(os.path.join(pathBase, "debug.sh"), "w")
    fOutDebugBash.write(actorLB.getBashDebugEnd())
    fOutDebugBash.close()
