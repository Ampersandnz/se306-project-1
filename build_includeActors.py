import os

pathPackage = os.path.join(os.path.dirname(__file__), "src/se306_p1_pkg/")

def mapClassToHeader(path):
    chMap = {} # Class --> Header
    fnames = []
    for root, dirs, files in os.walk(path):
        if root.find("/.") != -1 or root.find("\\.") != -1: continue
        for fname in files:
            fnames.append(os.path.join(root, fname))

    for fname in fnames:
        if os.path.splitext(fname)[-1].lower() not in (".h", ".hpp", ".hxx", ".inc"): continue
        if fname[0] == ".": continue

        f = open(fname, "r")
        fContents = f.read()
        f.close()

        # This is horribly hackish. I'm so, so sorry.
        for classNameRaw in fContents.split("class")[1:]:
            className = ""
            isDefined = False
            started = False

            # Scan across whitespace until it starts munching on a classname, then keep going until
            # it stops being a valid C/C++ identifier
            for i in range(len(classNameRaw)):
                char = classNameRaw[i]
                
                if not started and char in "\n\r\t ":
                    started = True
                    continue
                if char in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789":
                    className += char
                else:
                    posSemicolon = classNameRaw.find(";", i)
                    posOpenCurly = classNameRaw.find("{", i)

                    if posSemicolon == -1: posSemicolon = len(classNameRaw)
                    if posOpenCurly == -1: posOpenCurly = len(classNameRaw)

                    if posSemicolon > posOpenCurly:
                        isDefined = True
                    
                    break

            if not isDefined:
                break

            if className in chMap:
                print("build_includeActors.py - WARNING: Cannot distinguish between %s in %s and %s" % (
                    className, chMap[className], fname))
                continue
            chMap[className] = fname
    return chMap

def createCppInclude(classHeaderMap, relativePath, actorlistFname, outputheaderFname):
    actorNames = set()
    pathNames = set()
    for line in open(actorlistFname, "r"):
        tokens = line.split("#")[0].split()
        if len(tokens) == 5:
            actorNames.add(tokens[0])

    for actorName in actorNames:
        try:
            pathNames.add(classHeaderMap[actorName])
        except:
            print("build_includeActors.py - WARNING: Cannot find class %s - does it exist?" % (
                actorName))

    outStrings = []
    outStrings.append("// This file is automatically generated by build_includeActors.py\n")
    outStrings.append("#ifndef SE306P1___AUTOGEN__ACTORLIST___DEFINED\n")
    outStrings.append("#define SE306P1___AUTOGEN__ACTORLIST___DEFINED\n")
    for pathName in sorted(pathNames):
        pathNameNice = os.path.relpath(pathName, relativePath)
        outStrings.append("  #include \"%s\"\n" % (pathNameNice))
    outStrings.append("#endif // #ifndef SE306P1___AUTOGEN__ACTORLIST___DEFINED\n")

    fOut = open(outputheaderFname, "w")
    fOut.write("".join(outStrings))
    fOut.close()
    

def createBuildInclude(relativePath, searchPath, outputheaderFname):
    pathNamesRaw = []
    pathNames = set()
    for root, dirs, files in os.walk(searchPath):
        if root.find("/.") != -1 or root.find("\\.") != -1: continue
        for pathName in files:
            pathNamesRaw.append(os.path.join(root, pathName))
            
    for pathName in pathNamesRaw:
        if os.path.splitext(pathName)[-1].lower() not in (".c", ".cpp", ".cxx"): continue
        if pathName[0] == ".": continue
        
        pathNames.add(pathName)

    outStrings = []
    outStrings.append("## This file is automatically generated by build_includeActors.py\n")
    outStrings.append("add_library(ActorLibrary\n")
    for pathName in sorted(pathNames):
        pathNameNice = os.path.relpath(pathName, relativePath)
        outStrings.append("  %s\n" % (pathNameNice))
    outStrings.append(")\n")

    fOut = open(outputheaderFname, "w")
    fOut.write("".join(outStrings))
    fOut.close()


if __name__ == "__main__":
    classHeaderMap = mapClassToHeader(os.path.join(pathPackage, "src"))
    
    createCppInclude(
        classHeaderMap,
        os.path.join(pathPackage, "src"),
        os.path.join(pathPackage, "world/actorlist"),
        os.path.join(pathPackage, "src/__autogen__actorlist__"))
    
    createBuildInclude(
        pathPackage,
        os.path.join(pathPackage, "src"),
        os.path.join(pathPackage, "__autogen__actorbuildlist__"))
